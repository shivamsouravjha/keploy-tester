basePath: /api
definitions:
  controllers.AuthInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.EventLog:
    properties:
      id:
        type: string
      payload:
        type: string
      status:
        description: '"active", "archived"'
        type: string
      triggerID:
        type: string
      triggeredAt:
        type: string
      type:
        description: '"scheduled" or "api"'
        type: string
    type: object
  models.Trigger:
    properties:
      createdAt:
        type: string
      endpoint:
        type: string
      id:
        type: string
      payload:
        type: string
      schedule:
        type: string
      type:
        description: '"scheduled" or "api"'
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:4000
info:
  contact: {}
  description: This API allows users to create and manage event triggers
  title: Event Trigger API
  version: "1.0"
paths:
  /events:
    get:
      description: Fetch event logs from the last 2 hours
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.EventLog'
            type: array
      security:
      - BearerAuth: []
      summary: Get active event logs
  /events/archived:
    get:
      description: Fetch logs that are older than 2 hours but still within 48 hours
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.EventLog'
            type: array
      security:
      - BearerAuth: []
      summary: Get archived event logs
  /events/purge:
    delete:
      description: Deletes logs older than 48 hours
      responses:
        "200":
          description: Old events purged
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Purge old event logs
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      parameters:
      - description: User Login Credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.AuthInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: User login
  /register:
    post:
      consumes:
      - application/json
      description: Creates a new user with a username and password
      parameters:
      - description: User Registration Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.AuthInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Register a new user
  /triggers:
    get:
      description: Fetch all stored triggers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Trigger'
            type: array
      security:
      - BearerAuth: []
      summary: Get all triggers
      tags:
      - Triggers
    post:
      consumes:
      - application/json
      description: Creates a scheduled or API trigger
      parameters:
      - description: Trigger object
        in: body
        name: trigger
        required: true
        schema:
          $ref: '#/definitions/models.Trigger'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Trigger'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new trigger
      tags:
      - Triggers
  /triggers/{id}:
    delete:
      description: Removes a trigger from the system
      parameters:
      - description: Trigger ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Trigger deleted
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a trigger
    get:
      description: Fetch a trigger by ID
      parameters:
      - description: Trigger ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Trigger'
      security:
      - BearerAuth: []
      summary: Get a specific trigger
    put:
      consumes:
      - application/json
      description: Modify an existing trigger
      parameters:
      - description: Trigger ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated Trigger object
        in: body
        name: trigger
        required: true
        schema:
          $ref: '#/definitions/models.Trigger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Trigger'
      security:
      - BearerAuth: []
      summary: Update a trigger
  /triggers/{id}/execute:
    post:
      description: Triggers an event immediately for testing
      parameters:
      - description: Trigger ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Manually execute a trigger
      tags:
      - Triggers
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
